import 'package:flutter/material.dart';import 'package:flutter/widgets.dart';import 'package:flutter/cupertino.dart';import 'package:cloud_firestore/cloud_firestore.dart';import 'package:finalexam/model/item_model.dart';import 'package:table_calendar/table_calendar.dart';import 'package:finalexam/screen/card_screen.dart';import 'package:finalexam/screen/main_todo_screen.dart';import 'package:finalexam/screen/detail_item_screen.dart';import 'package:finalexam/provider/todo_db.dart';import 'package:finalexam/widget/add_todo.dart';class CalendarScreen extends StatefulWidget {  final String user;  CalendarScreen({this.user});  @override  _CalendarScreenState createState() => _CalendarScreenState(user: this.user);}class _CalendarScreenState extends State<CalendarScreen> with TickerProviderStateMixin{  final String user;  _CalendarScreenState({this.user});  AnimationController _controller;  DateTime _selectedDay;  int _day;  @override  void initState() {    super.initState();    _controller = AnimationController(      vsync: this,      duration: const Duration(milliseconds: 400),    );    _selectedDay  = DateTime.now();    _day = changeDaytoInt(_selectedDay);    _controller.forward();  }  @override  Widget build(BuildContext context) {    return Scaffold(      body: SafeArea(        child: Column(          mainAxisSize: MainAxisSize.max,          children: <Widget>[            _buildTableCalendar(),            const SizedBox(height: 8.0),          Expanded(child: _buildEvent()),          ],        ),      ),        bottomSheet: _deactivateBottomWidget(context),      floatingActionButton: FloatingActionButton.extended(          backgroundColor: Colors.deepOrangeAccent,          onPressed: () => _todoInsert(),          label: Row(            children: <Widget>[              Icon(Icons.add),              Text("할 일 추가")            ],          )      ),floatingActionButtonLocation: FloatingActionButtonLocation.centerFloat,    );  }  Future<void> _todoInsert () async {    return showModalBottomSheet(        isScrollControlled: true,        context: context,        builder: (BuildContext context){          return Material(            child: Padding(              padding: EdgeInsets.only(bottom: MediaQuery.of(context).viewInsets.bottom),              child: Container(                  child: NewTodoInsertWidget(user: user,)              ),            ),          );        });  }  Widget _deactivateBottomWidget(BuildContext context) {    return Material(      shadowColor: Colors.black,      elevation: 70.0,      child: Container(        width: MediaQuery.of(context).size.width,        height: MediaQuery.of(context).size.height*0.1,        decoration: BoxDecoration(          border: Border(top: BorderSide(color: Colors.black12,width: 1.8,style: BorderStyle.solid)),//                borderRadius: BorderRadius.only(topLeft: Radius.circular(20.0), topRight: Radius.circular(20.0)),        ),        child: Row(          children: <Widget>[            Padding(              padding: const EdgeInsets.only(left: 9.0),              child: IconButton(                onPressed: () =>  Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder: (context) => TodoMainScreen(user: user,) ), (Route<dynamic> route) => false),                icon: Icon(                  Icons.dehaze,                  color: Colors.black,                ),              ),            ),            Spacer(),            Padding(              padding: const EdgeInsets.only(left: 9.0),              child: IconButton(                onPressed: () =>Navigator.of(context).pushAndRemoveUntil(MaterialPageRoute(builder: (context) => CardPage(user: user,) ), (Route<dynamic> route) => false),                icon: Icon(                  Icons.filter_none,                  color: Colors.black,                ),              ),            ),          ],        ),      ),    );  }  void _onDaySelected(DateTime day, List events) {    setState(() {      _selectedDay = day;     _day = changeDaytoInt(_selectedDay);     print(_day.toString());    });  }  Widget _buildTableCalendar() {    return TableCalendar(      locale: 'en_US',      initialCalendarFormat: CalendarFormat.week,      formatAnimation: FormatAnimation.slide,      startingDayOfWeek: StartingDayOfWeek.monday,      availableGestures: AvailableGestures.all,      availableCalendarFormats: const {        CalendarFormat.month: 'Month',        CalendarFormat.week: 'Week',      },      calendarStyle: CalendarStyle(        selectedColor: Colors.deepOrange[400],        todayColor: Colors.deepOrange[200],        markersColor: Colors.brown[700],      ),      headerStyle: HeaderStyle(        formatButtonTextStyle: TextStyle().copyWith(color: Colors.white, fontSize: 15.0),        formatButtonDecoration: BoxDecoration(          color: Colors.deepOrange[400],          borderRadius: BorderRadius.circular(16.0),        ),      ),      onDaySelected: _onDaySelected,    );  }  Widget _buildEvent() {    return StreamBuilder<QuerySnapshot>(      stream: Firestore.instance.collection("Users").document(user).collection("Todos").where("Day",isEqualTo: _day).snapshots(),      builder: (context, snapshot) {        if(snapshot.connectionState.index == 2){          return _buildEventList(snapshot.data.documents);        }        return Container();      }    );  }  int changeDaytoInt(DateTime time) {    return int.parse(time.year.toString() + "${time.month.toString().length == 2 ? time.month.toString() : "0" + time.month.toString()}" + "${time.day.toString().length == 2 ? time.day.toString() : "0" + time.day.toString()}");  }  Widget _buildEventList(List<DocumentSnapshot> docs){    return ListView(      children: docs          .map((doc) => _buildEventListTile(Todo.fromFireStore(doc)))          .toList(),    );  }  Widget _buildEventListTile(Todo todo){    return  Container(      decoration: BoxDecoration(        border: Border.all(width: 0.8),        borderRadius: BorderRadius.circular(12.0),      ),      margin: const EdgeInsets.symmetric(horizontal: 8.0, vertical: 4.0),      child: ListTile(        leading: MaterialButton(          onPressed: () => TodoDataBaseService().doneButtonTodo(todo.id, todo.done),          child: Checkbox(              value: todo.done,              onChanged: null,          ),        ),        trailing: MaterialButton(          onPressed: () => TodoDataBaseService().removeTodo(todo.id),          child: Icon(Icons.delete_forever,color: Colors.deepOrangeAccent,)        ),        title: Text(todo.name),        onTap: () =>  Navigator.of(context).push(MaterialPageRoute(            builder: (context) =>                DetailItemScreen(                  id:todo.id, name : todo.name, info : todo.info, pickedDay: todo.time.toDate(), uid: user, pickedCategory: todo.category,))),      ),    );  }}